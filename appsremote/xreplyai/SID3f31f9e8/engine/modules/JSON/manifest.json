{
	"name": "JSON",
	"info": {
		"en": "Work with JSON and JSONPath",
		"ru": "Работа с JSON и JSONPath"
	},
	"icon": "json.png",
	"description": "JSON",
	"description_small": {
		"en": "JSON",
		"ru": "JSON"
	},
	"major_version": 3,
	"minor_version": 0,
	"developer_name": "Oyasumi Punpun",
	"developer_email": "likangt2012@gmail.com",
	"developer_site": "https://github.com/CheshireCaat",
	"is_autogenerated": true,
	"api_version": 1,
	"actions": [
		{
			"name": "JsonCreateObject",
			"description": {
				"en": "Create object",
				"ru": "Создать объект"
			},
			"template": "{{Save}}",
			"is_element": false,
			"interface": "json_create_object_interface.js",
			"select": "json_create_object_select.js",
			"code": [
				{
					"file": "json_create_object_code.js",
					"name": "json_create_object_code"
				}
			]
		},
		{
			"name": "JsonGetValue",
			"description": {
				"en": "Get value",
				"ru": "Получить значение"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_value_interface.js",
			"select": "json_parse_value_select.js",
			"code": [
				{
					"file": "json_parse_value_code.js",
					"name": "json_parse_value_code"
				}
			]
		},
		{
			"name": "JsonGetAllValues",
			"description": {
				"en": "Get all values",
				"ru": "Получить все значения"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_values_interface.js",
			"select": "json_parse_values_select.js",
			"code": [
				{
					"file": "json_parse_values_code.js",
					"name": "json_parse_values_code"
				}
			]
		},
		{
			"name": "JsonGetKey",
			"description": {
				"en": "Get key",
				"ru": "Получить ключ"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_key_interface.js",
			"select": "json_parse_key_select.js",
			"code": [
				{
					"file": "json_parse_key_code.js",
					"name": "json_parse_key_code"
				}
			]
		},
		{
			"name": "JsonGetAllKeys",
			"description": {
				"en": "Get all keys",
				"ru": "Получить все ключи"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_parse_keys_interface.js",
			"select": "json_parse_keys_select.js",
			"code": [
				{
					"file": "json_parse_keys_code.js",
					"name": "json_parse_keys_code"
				}
			]
		},
		{
			"name": "JsonGetCount",
			"description": {
				"en": "Elements count",
				"ru": "Количество элементов"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_get_count_interface.js",
			"select": "json_get_count_select.js",
			"code": [
				{
					"file": "json_get_count_code.js",
					"name": "json_get_count_code"
				}
			]
		},
		{
			"name": "JsonChangeValue",
			"description": {
				"en": "Change value",
				"ru": "Изменить значение"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_change_value_interface.js",
			"select": "json_change_value_select.js",
			"code": [
				{
					"file": "json_change_value_code.js",
					"name": "json_change_value_code"
				}
			]
		},
		{
			"name": "JsonRemoveValue",
			"description": {
				"en": "Remove value",
				"ru": "Удалить значение"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_remove_value_interface.js",
			"select": "json_remove_value_select.js",
			"code": [
				{
					"file": "json_remove_value_code.js",
					"name": "json_remove_value_code"
				}
			]
		},
		{
			"name": "JsonCheckFormat",
			"description": {
				"en": "Check if string matches JSON",
				"ru": "Подходит ли строка под парсинг JSON"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_check_format_interface.js",
			"select": "json_check_format_select.js",
			"code": [
				{
					"file": "json_check_format_code.js",
					"name": "json_check_format_code"
				}
			]
		},
		{
			"name": "JsonChangeFormat",
			"description": {
				"en": "Change format (deprecated)",
				"ru": "Изменить формат (устаревшее)"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_change_format_interface.js",
			"select": "json_change_format_select.js",
			"code": [
				{
					"file": "json_change_format_code.js",
					"name": "json_change_format_code"
				}
			]
		},
		{
			"name": "JsonFromString",
			"description": {
				"en": "String to JSON",
				"ru": "Строку в JSON"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_from_string_interface.js",
			"select": "json_from_string_select.js",
			"code": [
				{
					"file": "json_from_string_code.js",
					"name": "json_from_string_code"
				}
			]
		},
		{
			"name": "JsonToString",
			"description": {
				"en": "JSON to string",
				"ru": "JSON в строку"
			},
			"template": "{{Data}} -> {{Save}}",
			"is_element": false,
			"interface": "json_to_string_interface.js",
			"select": "json_to_string_select.js",
			"code": [
				{
					"file": "json_to_string_code.js",
					"name": "json_to_string_code"
				}
			]
		}
	],
	"localize": {
		"You can use simple paths, as if you yourself modify or delete a value in the code. For example, we have a line like <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 10, \"tries\": 5}}</span> and want to change the value of <span style=\"color:black\">data.score</span>. To do this, we indicate as a query a string like <span style=\"color:black\">$.data.score</span> or <span style=\"color:black\">data.score</span> and as a value a number, for example, 40. As a result, we get a string like <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 40, \"tries\": 5}}</span>. This will also work with arrays. For example, if you have an array <span style=\"color:black\">array</span> and want to change the first element, use a query like <span style=\"color:black\">$.array[0]</span>.": {
			"ru": "Вы можете использовать простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 10, \"tries\": 5}}</span> и мы хотим изменить значение у <span style=\"color:black\">data.score</span>. Чтобы сделать это, в качестве запроса возьмём строку вида <span style=\"color:black\">$.data.score</span> или <span style=\"color:black\">data.score</span> и в качестве значения число, например, 40. В результате мы получим строку вида <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 40, \"tries\": 5}}</span>. Это также работает с массивами. Например, если вы имеете массив <span style=\"color:black\">array</span> и хотите изменить первый элемент, используйте запрос вида <span style=\"color:black\">$.array[0]</span>."
		},
		"You can use simple paths, as if you yourself modify or delete a value in the code. For example, we have a line like <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 10, \"tries\": 5}}</span> and want to remove the value of <span style=\"color:black\">data.score</span>. To do this, we indicate as a query a string like <span style=\"color:black\">$.data.score</span> or <span style=\"color:black\">data.score</span>. As a result, we get a string like <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"tries\": 5}}</span>. This will also work with arrays. For example, if you have an array <span style=\"color:black\">array</span> and want to remove the first element, use a query like <span style=\"color:black\">$.array[0]</span>.": {
			"ru": "Вы можете использовать простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"score\": 10, \"tries\": 5}}</span> и мы хотим удалить значение <span style=\"color:black\">data.score</span>. Чтобы сделать это, в качестве запроса возьмём строку вида <span style=\"color:black\">$.data.score</span> или <span style=\"color:black\">data.score</span>. В результате мы получим строку вида <span style=\"color:black\">{\"name\":\"John\", \"data\":{\"tries\": 5}}</span>. Это также работает с массивами. Например, если вы имеете массив <span style=\"color:black\">array</span> и хотите удалить первый элемент, используйте запрос вида <span style=\"color:black\">$.array[0]</span>."
		},
		"Consider an example. Suppose we got a line of the form <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span> from a particular site. In a normal situation, we will have to write code to get, for example, the first message - <span style=\"color:black\">m1</span>. With JSONPath, we can simply specify the desired path - <span style=\"color:black\">$.messages[0]</span> and get what we needed as a result. If we briefly describe what exactly such a request means, we get the following: we take the root element using the <span style=\"color:black\">$</span> symbol, access the child element <span style=\"color:black\">messages</span> through the dot symbol, and indicate the index of the element we need.": {
			"ru": "Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span>. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - <span style=\"color:black\">m1</span>. С помощью JSONPath мы можем просто указать нужный путь - <span style=\"color:black\">$.messages[0]</span> и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа <span style=\"color:black\">$</span>, обращаемся к дочернему элементу <span style=\"color:black\">messages</span> через символ точки, и указываем индекс нужного нам элемента."
		},
		"This action also supports complex queries - for example, using filters - <span style=\"color:black\">$.data[?(@.price &lt;= 100)]</span>. In addition, you can access properties that contain special characters, such as the period character - <span style=\"color:black\">$.data[(\"secret.token\")]</span> or <span style=\"color:black\">$.data['secret.token']</span>. When using double quotes, always enclose the property name in parentheses.": {
			"ru": "Данное действие поддерживает комплексные запросы - например, с использованием фильтров - <span style=\"color:black\">$.data[?(@.price &lt;= 100)]</span>. Кроме того, вы можете обращаться к свойствам, содержащим специальные символы, вроде символа точки - <span style=\"color:black\">$.data[(\"secret.token\")]</span> или <span style=\"color:black\">$.data['secret.token']</span>. При использовании двойных кавычек всегда обрамляйте название свойства в круглые скобки."
		},
		"Consider an example. Suppose we got a line of the form <span style=\"color:black\">{\"Kate\":{\"rating\":5,\"count\":6},\"John\":{\"rating\":1,\"count\":2}}</span> from a particular site. We want to get the names of people whose rating is greater than or equal to 1. This can easily be done using a query like <span style=\"color:black\">$.[?(@.rating &gt;= 1)]</span>. Thus, as a result, we get a list of names satisfying our request.": {
			"ru": "Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида <span style=\"color:black\">{\"Kate\":{\"rating\":5,\"count\":6},\"John\":{\"rating\":1,\"count\":2}}</span>. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида <span style=\"color:black\">$.[?(@.rating &gt;= 1)]</span>. Таким образом, в результате мы получим список имён, удовлетворяющих нашему запросу."
		},
		"Consider an example. Suppose we got a line of the form <span style=\"color:black\">{\"Kate\":{\"rating\":5,\"count\":6},\"John\":{\"rating\":1,\"count\":2}}</span> from a particular site. We want to get the names of people whose rating is greater than or equal to 1. This can easily be done using a query like <span style=\"color:black\">$.[?(@.rating &gt;= 1)]</span>. Thus, as a result, we get a first name satisfying our request.": {
			"ru": "Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида <span style=\"color:black\">{\"Kate\":{\"rating\":5,\"count\":6},\"John\":{\"rating\":1,\"count\":2}}</span>. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида <span style=\"color:black\">$.[?(@.rating &gt;= 1)]</span>. Таким образом, в результате мы получим первое имя, удовлетворяющее нашему запросу."
		},
		"Consider an example. Suppose we got a line of the form <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span> from a particular site. We need to find out how many new messages came from the user. With JSONPath, we can simply specify the desired path - <span style=\"color:black\">$.messages[*]</span> and get the exact number of incoming messages.": {
			"ru": "Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида <span style=\"color:black\">{\"age\":100, \"name\":\"John\", \"messages\": [\"m1\", \"m2\", \"m3\"]}</span>. Мы хотим узнать, сколько новых сообщений было получено от пользователя. С помощью JSONPath мы можем просто указать нужный путь - <span style=\"color:black\">$.messages[*]</span> и получить точное число входящих сообщений."
		},
		"Please note, if you use the path <span style=\"color:black\">$.messages[*]</span> - the output will be a list of values, but the actions <span style=\"color:black\">Get Value</span> or <span style=\"color:black\">Get Key</span> will return only the first element from the list,i.e. <span style=\"color:black\">m1</span>, not <span style=\"color:black\">[m1, m2, m3]</span>. If you need a list, use the <span style=\"color:black\">Get all values</span> or <span style=\"color:black\">Get all keys</span> actions.": {
			"ru": "Обратите внимание, если использовать путь <span style=\"color:black\">$.messages[*]</span> - на выходе получится список значений, но действия <span style=\"color:black\">Получить значение</span> или <span style=\"color:black\">Получить ключ</span> вернут только первый элемент из списка, т.е <span style=\"color:black\">m1</span>, а не <span style=\"color:black\">[m1, m2, m3]</span>. Если вам нужен именно список, используйте действия <span style=\"color:black\">Получить все значения</span> или <span style=\"color:black\">Получить все ключи</span>."
		},
		"Please note that if you specify as a variable for checking not a string, but a variable of any other type - the result will always be <span style=\"color:black\">false</span>. In this regard, this action is different from the JavaScript function <span style=\"color:black\">JSON.parse()</span>, as there is an additional check for suitable types.": {
			"ru": "Обратите внимание, если вы укажете в качестве переменной для проверки не строку, а переменную любого другого типа - результатом всегда будет <span style=\"color:black\">false</span>. В этом плане данное действие отличается от JavaScript функции <span style=\"color:black\">JSON.parse()</span>, так как происходит дополнительная проверка на подходящие типы."
		},
		"Please note, if you use the path <span style=\"color:black\">$.messages[*]</span> - the output will be a list of values and the number of elements will be 3, but if you specify a query <span style=\"color:black\">$.messages</span>, then the number of elements will be 1, because this query points to the object as a whole, and not to its elements.": {
			"ru": "Обратите внимание, если использовать путь <span style=\"color:black\">$.messages[*]</span> - на выходе получится список значений и число элементов будет равно 3, но если вы укажете запрос вида <span style=\"color:black\">$.messages</span> число элементов будет равно 1, потому что данный запрос указывает на объект в целом, а не на его элементы."
		},
		"Please note, if you use this action - the output will be always a list of values, but the action <span style=\"color:black\">Get key</span> will return only the first element from the list.": {
			"ru": "Обратите внимание, если вы используете это действие - результатом всегда будет список значений, но действие <span style=\"color:black\">Получить ключ</span> вернёт только первый подходящий элемент из списка."
		},
		"Please note, if you use this action - the output will be always a single value, but the action <span style=\"color:black\">Get all keys</span> will return all elements as list.": {
			"ru": "Обратите внимание, если вы используете это действие - результатом всегда будет одно значение, но действие <span style=\"color:black\">Получить все ключи</span> вернёт все подходящие элементы в виде списка."
		},
		"In a similar way, we can do the inverse transformation, i.e. make a JSON format string from the object. For example, we have an object with two parameters. One of them is an array of three numbers, the other is a simple string. Let it be student performance data for the subject. After converting, we can get a JSON string of the form like <span style=\"color:black\">{\"name\":\"John\",\"grades\":[5,5,4]}</span>.": {
			"ru": "Подобным образом мы можем сделать и обратное преобразование, т.е. сделать из объекта строку в формате JSON. Например, у нас есть объект с двумя параметрами. Один из них - это массив из трёх чисел, другой - это обычная строка. Пусть это будет информация об успеваемости студента за предмет. После преобразования, мы получим JSON строку подобного вида - <span style=\"color:black\">{\"name\":\"John\",\"grades\":[5,5,4]}</span>."
		},
		"Remember that this function is required for a simple conversion. You can use other actions with both the object and the string. It is recommended that you use the <span style=\"color:black\">Get value</span> or <span style=\"color:black\">Get all values</span> actions if you want to get specific information about an object or JSON string.": {
			"ru": "Помните, что данная функция используется для простого преобразования. Вы можете использовать другие действия как с объектом, так и со строкой. Но всё же рекомендуется сразу обращаться к функциям <span style=\"color:black\">Получить значение</span> или <span style=\"color:black\">Получить все значения</span>, если вы хотите собрать особую информацию об объекте или строке в формате JSON."
		},
		"JSON is a text format for data exchange, serialization (storage) of objects, arrays, numbers, strings, logical values and <span style=\"color:black\">null</span> values. It is based on JavaScript syntax, but still different from it: not every JavaScript code is JSON, and not every JSON is JavaScript code.": {
			"ru": "JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения <span style=\"color:black\">null</span>. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript."
		},
		"For example, checking for the string <span style=\"color:black\">{\"name\":\"John\"}</span> will return <span style=\"color:black\">true</span>, because it has a valid JSON format. The string <span style=\"color:black\">\"name\":\"John\"</span> will have an incorrect structure, it does not have curly braces, so the result will be <span style=\"color:black\">false</span>.": {
			"ru": "Например, проверка для строки <span style=\"color:black\">{\"name\":\"John\"}</span> вернет <span style=\"color:black\">true</span>, так как она имеет валидный формат JSON. Строка <span style=\"color:black\">\"name\":\"John\"</span> будет имеет неверную структуру, у неё отсутствуют фигурные скобки, поэтому результатом будет <span style=\"color:black\">false</span>."
		},
		"For example, changing format of the string <span style=\"color:black\">{\"name\":\"John\"}</span> will return object that contains one property - <span style=\"color:black\">name</span> with value <span style=\"color:black\">John</span>.": {
			"ru": "Например, при изменении формата строки вида <span style=\"color:black\">{\"name\":\"John\"}</span> будет возвращён объект, содержащий одно свойство - <span style=\"color:black\">name</span> со значением <span style=\"color:black\">John</span>."
		},
		"You can also use simplified syntax for queries. For example, the result of queries <span style=\"color:black\">$.messages[*]</span> and <span style=\"color:black\">messages[*]</span> will be the same. The module itself will add the necessary characters at the beginning of the query string. This also applies to the search for any elements (not only root), i.e. for queries of the form <span style=\"color:black\">$..messages[*]</span> and <span style=\"color:black\">..messages[*]</span> will be the same too.": {
			"ru": "Вы также можете использовать упрощённый синтаксис для запросов. Например, результат запросов <span style=\"color:black\">$.messages[*]</span> и <span style=\"color:black\">messages[*]</span> будет одинаковым. Модуль сам добавит необходимые символы в начале строки запроса. Это также касается поиска любых элементов (не только корневого), т.е. для запросов вида <span style=\"color:black\">$..messages[*]</span> и <span style=\"color:black\">..messages[*]</span> результат также будет одинаковым."
		},
		"You can use simple parameter names to get the value you need. For example, having the line from the previous example, you can specify a query of the form <span style=\"color:black\">age</span> as a path and get the value of this property - <span style=\"color:black\">100</span>.": {
			"ru": "Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида <span style=\"color:black\">age</span> и получить значение этого свойства - <span style=\"color:black\">100</span>."
		},
		"Typical examples of using this function are working with the API of a website or, more often in the context of BAS, working with Cookies. In BAS, cookies are presented to the user in JSON format strings. This often causes difficulties. But with JSONPath, you can easily get the data you need.": {
			"ru": "Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные."
		},
		"Use action <a href=\"#!/JsonCheckFormat\">Check if string matches JSON</a> to make sure that string conversion is possible or just use the <span style=\"color:black\">Ignore Errors</span> action to handle possible errors.": {
			"ru": "Используйте действие <a href=\"#!/JsonCheckFormat\">Подходит ли строка под парсинг JSON</a>, чтобы проверить, что преобразование из строки возможно. Или просто используйте действие <span style=\"color:black\">Игнорировать ошибки</span>, чтобы обработать возможные исключения."
		},
		"See full documentation and examples <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://cheshirecaat.github.io/bas-docs/json-path/json-path-en.html'); return false;\"><span class=\"tr\">here.</span></a>": {
			"ru": "Смотрите полную документацию и примеры <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html'); return false;\"><span class=\"tr\">здесь.</span></a>"
		},
		"The type of the returned object will be the same as the original variable. This means that if you specify a string, the string will be returned; if you specify an object, the object will be returned.": {
			"ru": "Тип возвращаемого объекта будет таким же, как и у оригинальной переменной. Это означает, что если вы укажете строку, будет возвращена строка; если вы вы укажете объект, будет возвращён объект."
		},
		"JSONPath is a powerful tool for working with the JSON data type. It is built on the basis of logic, which is very similar to XPath, but has some limitations, because the data type itself is much simpler than XML.": {
			"ru": "JSONPath - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, так как сам тип данных намного проще XML."
		},
		"Using this technology, we can quickly get data from JavaScript objects or strings in JSON format. In addition, this greatly simplifies the work, as usually, parsing JSON requires writing code.": {
			"ru": "С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, так как обычно, чтобы распарсить JSON, требуется писать код."
		},
		"JSONPath query should not be empty. If you want to change the data format, use the <a href=\"#!/JsonToString\">JSON to string</a> or <a href=\"#!/JsonFromString\">String to JSON</a> action.": {
			"ru": "JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, используйте действие <a href=\"#!/JsonToString\">JSON в строку</a> или <a href=\"#!/JsonFromString\">Строку в JSON</a>."
		},
		"JSON string or object to format changing. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.": {
			"ru": "JSON строка или объект для изменения формата. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"JSON string or object to change value. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.": {
			"ru": "JSON строка или объект для изменения значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"JSON string or object to remove value. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.": {
			"ru": "JSON строка или объект для удаления значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"JSON string or object to parse. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.": {
			"ru": "JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"JSON string or object to count. You can specify a valid JSON string here or an object whose type is not simple. Simple types include numbers, boolean values, null value.": {
			"ru": "JSON строка или объект для подсчёта. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null."
		},
		"With this action, you can see if you can use the string to parse JSON and retrieve data to avoid possible errors.": {
			"ru": "С помощью этого действия вы можете убедиться, можно ли использовать строку для парсинга JSON и получения данных, чтобы избежать возможных ошибок."
		},
		"With this action, you can convert a JSON string to a JavaScript object and vice versa.": {
			"ru": "С помощью этого действия вы можете преобразовать строку в формате JSON в объект JavaScript и наоборот."
		},
		"JSONPath query can be empty in this action. In this case, the total number of keys of the object or string in JSON format will be calculated.": {
			"ru": "JSONPath запрос может быть пустым в этом действии. В этом случае будет подсчитано общее количество ключей объекта или строки в формате JSON."
		},
		"If the object at the specified query is not found or will not contain elements, the result will be zero.": {
			"ru": "Если объект по указанному запросу не будет найден или не будет содержать элементов, результатом будет ноль."
		},
		"If you specify an object of the wrong type or an incorrect format, the result will be the same object.": {
			"ru": "Если вы укажете объект неподходящего типа, либо неверный формат, результатом будет тот же объект."
		},
		"If the result of the action is a single value, a list containing this value will be returned.": {
			"ru": "Если результатом действия будет одно значение, будет возвращён список, содержащий это значение."
		},
		"If the result of the action is a single key, a list containing this key will be returned.": {
			"ru": "Если результатом действия будет один ключ, будет возвращён список, содержащий этот ключ."
		},
		"If an error occurs during parsing, an empty string will be returned.": {
			"ru": "Если во время парсинга произойдёт ошибка, будет возвращена пустая строка."
		},
		"Check that selected variable is valid JSON string and return the result to a variable.": {
			"ru": "Проверить, что выбранная переменная является допустимой строкой JSON и сохранить результат в переменную."
		},
		"Change the format of the selected JSON string or object and return the result to the variable.": {
			"ru": "Изменить формат выбранной JSON строки или объекта и сохранить результат в переменную."
		},
		"New data format for your variable. You can use only two options: String or JSON.": {
			"ru": "Новый формат данных для вашей переменной. Вы можете использовать только два варианта: String или JSON."
		},
		"Variable that stores the result of parsing (All values or an list of one value).": {
			"ru": "Переменная, содержащая результат парсинга (Все значения или список, состоящий из одного значения)."
		},
		"Variable that stores the result of changing (Modified object or string).": {
			"ru": "Переменная, содержащая результат изменения (Модифицированный объект или строка)."
		},
		"Variable that stores the result of removing (Modified object or string).": {
			"ru": "Переменная, содержащая результат удаления (Модифицированный объект или строка)."
		},
		"Variable that stores the result of parsing (All keys or an list of one key).": {
			"ru": "Переменная, содержащая результат парсинга (Все ключи или список, состоящий из одного ключа)."
		},
		"Variable that stores the result of format changing (object or string).": {
			"ru": "Переменная, содержащая результат изменения формата (объект или строка)."
		},
		"Variable that stores the result of format checking (true or false).": {
			"ru": "Переменная, содержащая результат проверки формата (true или false)."
		},
		"Variable that stores the result of parsing (First value only).": {
			"ru": "Переменная, содержащая результат парсинга (Первое подходящее значение)."
		},
		"Variable that stores the result of parsing (First key only).": {
			"ru": "Переменная, содержащая результат парсинга (Первый подходящий ключ)."
		},
		"Variable that stores the result of count (Elements count).": {
			"ru": "Переменная, содержащая результат подсчёта (Количество элементов)."
		},
		"Variable that stores the result of creation (Object).": {
			"ru": "Переменная, содержащая результат создания (Объект)."
		},
		"Execute JSONPath query and get one value (first matching).": {
			"ru": "Выполнить запрос JSONPath и получить одно значение (первое подходящее)."
		},
		"Execute JSONPath query and get one key (first matching).": {
			"ru": "Выполнить запрос JSONPath и получить один ключ (первый подходящий)."
		},
		"Execute JSONPath query and get all matching values.": {
			"ru": "Выполнить запрос JSONPath и получить все подходящие значения."
		},
		"Execute JSONPath query and get all matching keys.": {
			"ru": "Выполнить запрос JSONPath и получить все подходящие ключи."
		},
		"Execute JSONPath query and get elements count.": {
			"ru": "Выполнить запрос JSONPath и получить количество элементов."
		},
		"Execute JSONPath query and change object value.": {
			"ru": "Выполнить запрос JSONPath и изменить значение объекта."
		},
		"Execute JSONPath query and remove object value.": {
			"ru": "Выполнить запрос JSONPath и удалить значение объекта."
		},
		"New value for object that matches query.": {
			"ru": "Новое значение для объекта, удовлетворяющего запросу."
		},
		"There are six items for the given query.": {
			"ru": "Есть шесть элементов, удовлетворяющих запросу."
		},
		"There are no items for the given query.": {
			"ru": "Нет элементов, удовлетворяющих запросу."
		},
		"Any JSONPath query that you need.": {
			"ru": "Любой нужный вам запрос JSONPath."
		},
		"JSON string or object to change": {
			"ru": "JSON строка или объект для изменения"
		},
		"JSON string or object to remove": {
			"ru": "JSON строка или объект для удаления"
		},
		"JSON string or object to parse": {
			"ru": "JSON строка или объект для парсинга"
		},
		"JSON string or object to count": {
			"ru": "JSON строка или объект для подсчёта"
		},
		"JSON string to check": {
			"ru": "JSON строка для проверки"
		},
		"JSONPath query to change value": {
			"ru": "JSONPath запрос для изменения значения"
		},
		"JSONPath query to remove value": {
			"ru": "JSONPath запрос для удаления значения"
		},
		"JSONPath query to parse": {
			"ru": "JSONPath запрос для парсинга"
		},
		"JSONPath query to count": {
			"ru": "JSONPath запрос для подсчёта"
		},
		"Variable to save": {
			"ru": "Переменная, в которую сохранить результат"
		},
		"New value for object": {
			"ru": "Новое значение для объекта"
		},
		"New data format": {
			"ru": "Новый формат данных"
		},
		"The last two items in the cart.": {
			"ru": "Последние два товара в корзине."
		},
		"The last item in the cart.": {
			"ru": "Последний товар в корзине."
		},
		"The titles of all dialogs.": {
			"ru": "Заголовки всех диалогов."
		},
		"The third item in cart.": {
			"ru": "Третий товар в корзине."
		},
		"All possible elements.": {
			"ru": "Все возможные элементы."
		},
		"The age of user.": {
			"ru": "Возраст пользователя."
		},
		"You can use the <a href=\"#!/JsonChangeValue\">Change value</a> action to add new properties to the object - just specify the query that leads to the desired key. For example, if we have an object of the form <span style=\"color:black\">{\"name\":\"John\"}</span>, we can add a property <span style=\"color:black\">age</span> with the value <span style=\"color:black\">25</span> using the <span style=\"color:black\">$.age</span> query.": {
			"ru": "Вы можете использовать действие <a href=\"#!/JsonChangeValue\">Изменить значение</a> для добавления новых значений в объект - достаточно указать путь, который ведет к нужному ключу. Например, если у нас есть объект вида <span style=\"color:black\">{\"name\":\"John\"}</span>, мы можем добавить свойство <span style=\"color:black\">age</span> со значением <span style=\"color:black\">25</span> , используя запрос <span style=\"color:black\">$.age</span>."
		},
		"For example, if you specify the string <span style=\"color:black\">offset</span> as the key and the number <span style=\"color:black\">100</span> as the value, then the resulting object will look like this - <span style=\"color:black\">{\"offset\": 100}</span>.": {
			"ru": "Например, если вы укажете в качестве ключа строку <span style=\"color:black\">offset</span>, а в качестве значения число <span style=\"color:black\">100</span>, тогда полученный объект будет выглядеть так - <span style=\"color:black\">{\"offset\": 100}</span>. "
		},
		"One example of using this action is generating data, for example, for sending HTTP requests. You can also convert the resulting object to a string using the <a href=\"#!/JsonToString\">JSON to string</a> action.": {
			"ru": "Один из примеров использования данного действия это формирование данных, например, для отправки HTTP запросов. Вы также можете преобразовать полученный объект в строку с помощью действия <a href=\"#!/JsonToString\">JSON в строку</a>."
		},
		"You can use any data types for values - lists, strings, numbers, and so on. However, it is recommended to use strings or numbers for keys - in any case, keys will always be converted to a string.": {
			"ru": "Вы можете использовать любые типы данных для значений - списки, строки, числа и так далее. Однако для ключей рекомендуется использовать строки или числа - в любом случае ключи всегда будет преобразовываться в строку."
		},
		"This action is deprecated. It's recommended to use the <a href=\"#!/JsonToString\">JSON to string</a> or <a href=\"#!/JsonFromString\">String to JSON</a> action.": {
			"ru": "Это действие устарело. Рекомендуется использовать действие <a href=\"#!/JsonToString\">JSON в строку</a> или <a href=\"#!/JsonFromString\">Строку в JSON</a>."
		},
		"If you leave the key empty in one of the fields, the value will not be set, even if you specify it - similar to the action for creating lists.": {
			"ru": "Если вы оставите ключ пустым в одном из полей, значение не будет задано, даже если вы укажете его - аналогично действию для создания списков."
		},
		"If you want to add more properties or change existing ones, you can use the <a href=\"#!/JsonChangeValue\">Change value</a> action.": {
			"ru": "Если вы хотите добавить больше свойств или изменить существующие, вы можете использовать действие <a href=\"#!/JsonChangeValue\">Изменить значение</a>."
		},
		"Use the <a href=\"#!/JsonFromString\">String to JSON</a> action for reverse conversion (from string to object).": {
			"ru": "Используйте действие <a href=\"#!/JsonFromString\">Строку в JSON</a> для обратной конвертации (из строки в объект)."
		},
		"Use the <a href=\"#!/JsonToString\">JSON to string</a> action for reverse conversion (from object to string).": {
			"ru": "Используйте действие <a href=\"#!/JsonToString\">JSON в строку</a> для обратной конвертации (из объекта в строку)."
		},
		"Target string to convert. If a value of the incorrect type is provided, it will be returned unchanged.": {
			"ru": "Целевая строка для конвертации. Если указано значение некорректного типа, оно будет возвращено без изменений."
		},
		"Target object to convert. If a value of the incorrect type is provided, it will be returned unchanged.": {
			"ru": "Целевой объект для конвертации. Если указано значение некорректного типа, оно будет возвращено без изменений."
		},
		"The property value of the created object. You can also use variables or leave the field empty.": {
			"ru": "Значение свойства создаваемого объекта. Вы также можете использовать переменные или оставить поле пустым."
		},
		"The property key of the created object. You can also use variables or leave the field empty.": {
			"ru": "Ключ свойства создаваемого объекта. Вы также можете использовать переменные или оставить поле пустым."
		},
		"Convert the selected string to a JSON object and return the result to a variable.": {
			"ru": "Конвертировать выбранную строку в JSON объект и сохранить результат в переменную."
		},
		"Convert the selected JSON object to a string and return the result to a variable.": {
			"ru": "Конвертировать выбранный JSON объект в строку и сохранить результат в переменную."
		},
		"An array as a value (<span class=\"help-popup-code\">expression</span> type).": {
			"ru": "Список в качестве значения (тип <span class=\"help-popup-code\">expression</span>)."
		},
		"A string as a value (<span class=\"help-popup-code\">string</span> type).": {
			"ru": "Строка в качестве значения (тип <span class=\"help-popup-code\">string</span>)."
		},
		"A number as a value (<span class=\"help-popup-code\">int</span> type).": {
			"ru": "Число в качестве значения (тип <span class=\"help-popup-code\">int</span>)."
		},
		"With this action, you can convert a JSON string to a JavaScript object.": {
			"ru": "С помощью этого действия вы можете преобразовать JSON строку в объект JavaScript."
		},
		"With this action, you can convert a JavaScript object to a JSON string.": {
			"ru": "С помощью этого действия вы можете преобразовать объект JavaScript в строку JSON."
		},
		"Create a new object with initial values (optional).": {
			"ru": "Создать новый объект с начальными значениями (опционально)."
		},
		"Variable that stores the conversion result.": {
			"ru": "Переменная, в которой хранится результат конвертации."
		},
		"Target string to perform the check.": {
			"ru": "Целевая строка для выполнения проверки."
		},
		"The variable value as a key.": {
			"ru": "Значение переменной в качестве ключа."
		},
		"The resource value as a key.": {
			"ru": "Значение ресурса в качестве ключа."
		},
		"A regular string as a key.": {
			"ru": "Обычная строка в качестве ключа."
		},
		"Property with dot in name.": {
			"ru": "Свойство с точкой в имени."
		},
		"Key 1. Can be empty": {
			"ru": "Ключ 1. Может быть пустым"
		},
		"Key 2. Can be empty": {
			"ru": "Ключ 2. Может быть пустым"
		},
		"Key 3. Can be empty": {
			"ru": "Ключ 3. Может быть пустым"
		},
		"Target string": {
			"ru": "Целевая строка"
		},
		"Target object": {
			"ru": "Целевой объект"
		}
	},
	"engine": [
		"engine.js"
	],
	"browser": [],
	"depends": []
}